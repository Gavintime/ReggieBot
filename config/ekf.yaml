ekf_filter_node:
  ros__parameters:
    # in Hz, at which the filter will output a position estimate. Defaults to 30.
    frequency: 30.0
    # If true, no 3D information will be used in state estimate. Defaults to false.
    two_d_mode: true
    # Defaults to false.
    publish_acceleration: true
    # Defaults to true
    publish_tf: true

    # 3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates from landmark
    # observations) then: Set your "world_frame" to your map_frame value
    # 3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state estimation node
    # from robot_localization! However, that instance should *not* fuse the global data.
    map_frame: map
    odom_frame: odom
    base_link_frame: base_link
    # base_link_output_frame:
    world_frame: odom # Defaults to value of odom_frame

    # sensor_timeout:
    # transform_time_offset:
    # transform_timeout: 0
    # print_diagnostics:
    # smooth_lagged_data:
    # history_length:
    # permit_corrected_publication: false

    # use_control:
    # stamped_control:
    # control_timeout:
    # X˙,Y˙,Z˙,
    # roll˙,pitch˙,yaw
    # control_config: true,  false, false,
    #                 false, false, true
    # acceleration_limits: 1.3, 0.0, 0.0,
    #                      0.0, 0.0, 3.2
    # deceleration_limits: 1.3, 0.0, 0.0,
    #                      0.0, 0.0, 3.2
    # acceleration_gains: 0.8, 0.0, 0.0,
    #                     0.0, 0.0, 0.9
    # deceleration_gains: 0.8, 0.0, 0.0,
    #                     0.0, 0.0, 0.9

    # X,Y,Z,
    # roll,pitch,yaw,
    # X˙,Y˙,Z˙,
    # roll˙,pitch˙,yaw˙,
    # X¨,Y¨,Z¨
    # initial_state: 5.0,  4.0,  3.0,
    #                0.0,  0.0,  1.57,
    #                0.1,  0.2,  0.3,
    #                0.0,  0.0,  0.0,
    #                0.0,  0.0,  0.0




    # x, y, z,
    # roll, pitch, yaw,
    # vx, vy, vz,
    # vroll, vpitch, vyaw,
    # ax, ay, az
    odom0: diff_cont/odom
    # odom0_queue_size:
    # odom0_differential:
    # odom0_relative:
    # odom0_nodelay
    # dom0_pose_rejection_threshold: 5.0
    # odom0_twist_rejection_threshold: 1.0
    odom0_config:
      [
        true, true, true,
        false, false, false,
        false, false, false,
        false, false, true,
        false, false, false,
      ]

    imu0: imu_broad/imu
    # imu0_queue_size:
    # imu0_differential:
    # imu0_relative:
    # imu0_pose_rejection_threshold: 0.8
    # imu0_twist_rejection_threshold: 0.8
    # imu0_linear_acceleration_rejection_threshold: 0.8
    # imu0_remove_gravitational_acceleration:
    # gravitational_acceleration:
    # TODO: have different options for irl vs gazebo sim sensors
    imu0_config:
      [
        false, false, false,
        false, false, false,
        false, false, false,
        true, true, true, # mobile grade IMUs have very noisy angular vels, use the IMUs calculated angular pos instead
        true, true, true, # these are false in the tutorial
      ]


# # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
# # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
# # effects on the performance of the node. Defaults to false if unspecified.
#         debug: false

# # Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
#         debug_out_file: /path/to/debug/file.txt

# # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
# # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
# # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
# # However, if users find that a given variable is slow to converge, one approach is to increase the
# # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
# # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
# # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
# # unspecified.
#         process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
#                                    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]
# # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
# # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
# # question. Users should take care not to use large values for variables that will not be measured directly. The values
# # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
# #if unspecified.
#         initial_estimate_covariance: [1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9, 0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,  0.0,     0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-9,  0.0,     0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-9,  0.0,    0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-9, 0.0,    0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-9, 0.0,
#                                       0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-9]
